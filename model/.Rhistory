0, 1/6, 1/3, 1/2, NA), ncol = 5,
dimnames = list(1:5, 1:5))
p_cs_switch
c(NA, 1:4)
c(NA, 1:4) * 1:5
p_cs_stay = matrix(c(NA, 1/2, 1/3, 1/6, 0,
0.57, NA, .29, .14, 0,
.5, 3/8, NA, 1/8, 0,
4/11, 3/22, 3/11, NA, 0,
.4, .3, .2, .1, NA), ncol = 5,
dimnames = list(1:5, 1:5))
mean(c(2:5))
mean(c(1, 3:4))
mean(c(1, 3:5))
mean(c(1:2, 4:5))
mean(c(1:3, 5))
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(R.matlab)
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
library(rjson)
library(lme4)
library(pander)
library(effsize)
?pz
?pt
pnorm(5, lower.tail = F)
pnorm(4, lower.tail = F)
qnorm(0.001, lower.tail = F)
qnorm(0.001, lower.tail = T)
qnorm(0.001, lower.tail = F)
qnorm(0.0001, lower.tail = F)
pnorm(3.72, lower.tail = F)
qnorm(0.00001, lower.tail = F)
14*.64
?chisq.test
chisq.test(c(9,5))
?binom.test
binom.test(9, 14)
?chisq.test
13*.38
chisq.test(c(9,5), c(5,8))
chisq.test(rbind(c(9,5), c(5,8)))
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd('~/Downloads/rwebppl-master/')
ls
devtools::install_github("mhtess/rwebppl")
install.packages('devtools')
devtools::install_github("mhtess/rwebppl")
version
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
install.packages('pander')
scenario_info = fromJSON(file = 'scenarios.json')
data_files = list.files('pilot-results', pattern = '*.json')
fishing_data = NULL
# Helper function to find items in a list
lookup <- function(list, fun) {
is_match = sapply(list, fun)
return(which(is_match))
}
# Uses match_function to pull up information for each trial
match_scenario <- function(trees, strengths) {
match_index = lookup(scenario_info,
function (x) x$trees == trees && all(x$strengths == strengths))
return(scenario_info[[match_index]])
}
for (f in 1:length(data_files)) {
session_data = fromJSON(file = file.path('pilot-results', data_files[f]))
for (trial in 1:length(session_data)) {
trial_data = session_data[[trial]]
num_trees = trial_data$trees
strengths = trial_data$strengths
n_solutions = match_scenario(num_trees, strengths)$n_solutions
fishing_data = rbind(fishing_data,
data.frame(
team = f,
trial_no = trial_data$num,
num_trees = num_trees,
p1_strength = strengths[1],
p2_strength = strengths[2],
p3_strength = strengths[3],
n_solutions = n_solutions,
p1_choice = trial_data$player_choices[1],
p2_choice = trial_data$player_choices[2],
p3_choice = trial_data$player_choices[3],
payoff = trial_data$payoff,
max_payoff = trial_data$max_payoff,
is_max = trial_data$is_max
))
}
}
se <- function(x){return(sd(x)/sqrt(length(x)))}
# Refactor raw data according to # of attempts
time_to_criterion = fishing_data %>%
group_by(team, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(payoff)) %>%
mutate(block = rank(trial_no)) %>%
ungroup() %>%
mutate(category = factor(n_solutions, label = c("One solution", "Two solutions", "Three solutions")),
team = factor(team))
# Summarise time by category, block
time_by_block = time_to_criterion %>%
group_by(block, category) %>%
summarise(avg_time = mean(time_to_criterion),
se_time = se(time_to_criterion))
ggplot(time_by_block, aes(x = block, y = avg_time, group = category, color = category)) +
geom_point() +
geom_line() +
#geom_errorbar(aes(ymin = avg_time - se_time, ymax = avg_time + se_time), width = 0.1) +
xlab("Block") +
ylab("Number of attempts") +
theme_bw() +
scale_color_brewer("Trial type", palette = 'Set2')
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
setwd('../../../model')
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
list.files(pattern = 'model_simulation*.json')[-1]
list.files(pattern = 'model_simulation*.json')
list.files(pattern = 'model_simulation*')
getwd()
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
setwd('../../../model')
list.files(pattern = 'model_simulation*')
list.files(pattern = 'model_simulation*')[-1]
tail(list.files(pattern = 'model_simulation*'), n = 1)
simulation_results = fromJSON(file = simulation_file)
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)
simulation_results = fromJSON(file = simulation_file)
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)
simulation_results = fromJSON(file = simulation_file)
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_file
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_results[[1]]
simulation_results[[2]]
names(simulation_results)
simulation_results$params
simulation_output = simulation_results$output
simulation_output[[1]]
len(simulation_output)
length(simulation_output)
simulation_output[[1]][[1]]
iter
head(fishing_data)
setwd("~/Dropbox/CBMM16/CBMM_Fishermen/experiments/multipilot_v1/results")
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
for (iter in 1:length(simulation_output)) {
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
}
View(simulation_data)
?disp
?print
print('a')
print(sprintf('Running iteration: %i', 732))
flush.console()
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
for (iter in 1:length(simulation_output)) {
print(sprintf('Running iteration: %i', 732))
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
flush.console()
}
cat('Running iteration: ', 732)
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
for (iter in 1:length(simulation_output)) {
cat('Running iteration: ', iter)
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
flush.console()
}
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
for (iter in 1:length(simulation_output)) {
cat('Running iteration: ', iter, '\n')
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
cat('\f')
}
?rm
?txtProgressBar
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
# Create progress bar
pb = txtProgressBar(min = 1, max = 1000, initial = 1)
for (iter in 1:length(simulation_output)) {
setTxtProgressBar(pb, iter)
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
cat('\f')
}
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
# Create progress bar
pb = txtProgressBar(min = 1, max = 1000, initial = 1, width = 50)
for (iter in 1:length(simulation_output)) {
setTxtProgressBar(pb, iter)
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
cat('\f')
}
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
# Create progress bar
pb = txtProgressBar(min = 1, max = 1000, initial = 1, style = 3)
for (iter in 1:length(simulation_output)) {
setTxtProgressBar(pb, iter)
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
cat('\f')
}
?rbind.fill
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
# Create progress bar
pb = txtProgressBar(min = 1, max = 1000, initial = 1, style = 3)
for (iter in 1:length(simulation_output)) {
setTxtProgressBar(pb, iter)
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind.fill(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
# cat('\f')
}
rm(simulation_results, simulation_output, trial_data)
library(rjson)
library(dplyr)
library(plyr)
library(tidyr)
library(ggplot2)
library(rjson)
library(plyr)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd('../../../model')
simulation_file = tail(list.files(pattern = 'model_simulation*'), n = 1)[1]
simulation_results = fromJSON(file = simulation_file)
simulation_output = simulation_results$output
simulation_data = NULL
# Create progress bar
pb = txtProgressBar(min = 1, max = 1000, initial = 1, style = 3)
for (iter in 1:length(simulation_output)) {
setTxtProgressBar(pb, iter)
n_trials = length(simulation_output[[iter]])
for (trial in 1:n_trials) {
trial_data = simulation_output[[iter]][[trial]]
simulation_data = rbind.fill(simulation_data,
data.frame(iteration = iter,
trial_no = trial_data$num,
num_trees = trial_data$trees,
p1_strength = trial_data$strengths[1],
p2_strength = trial_data$strengths[2],
p3_strength = trial_data$strengths[3],
n_solutions = trial_data$n_solutions,
p1_prior = trial_data$beliefs[1],
p2_prior = trial_data$beliefs[2],
p3_prior = trial_data$beliefs[3],
p1_choice = trial_data$actions[1],
p2_choice = trial_data$actions[2],
p3_choice = trial_data$actions[3],
is_max = trial_data$is_max
))
}
# cat('\f')
}
rm(simulation_results, simulation_output, trial_data)
simulation_ttc = simulation_data %>%
group_by(iteration, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(is_max)) %>%
ungroup() %>%
mutate(category = factor(n_solutions, label = c("One solution", "Two solutions", "Three solutions")),
iteration = factor(iteration))
# simulation_by_block = si
simulation_ttc = simulation_data %>%
group_by(iteration, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(is_max)) %>%
ungroup() %>%
mutate(category = factor(n_solutions, labels = c("One solution", "Two solutions", "Three solutions")),
iteration = factor(iteration))
# simulation_by_block = si
simulation_ttc = simulation_data %>%
group_by(iteration, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(is_max)) %>%
ungroup()
# simulation_by_block = si
head(simulation_ttc)
head(simulation_data)
simulation_ttc = simulation_data %>%
group_by(iteration, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(p1_strength))
head(simulation_ttc)
simulation_ttc = simulation_data %>%
mutate(iteration = as.factor(iteration),
n_solutions = as.factor(n_solutions),
trial_no = as.factor(trial_no)) %>%
group_by(iteration, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(p1_strength))
# simulation_by_block = si
head(simulation_ttc)
simulation_ttc = simulation_data %>%
mutate(iteration = as.factor(iteration),
n_solutions = as.factor(n_solutions),
trial_no = as.factor(trial_no)) %>%
group_by(iteration, n_solutions, trial_no)
simulation_ttc = simulation_data %>%
mutate(iteration = as.factor(iteration),
n_solutions = as.factor(n_solutions),
trial_no = as.factor(trial_no)) %>%
group_by(iteration, n_solutions, trial_no) %>%
summarise(ttc = length(p1_choice))
# simulation_by_block = si
detach(plyr)
detach('plyr')
detach('package:plyr' unload = T)
detach("package:dplyr", unload=TRUE)
detach("package:plyr", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
library("plyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:plyr", unload=TRUE)
