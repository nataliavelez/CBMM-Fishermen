geom_vline(xintercept = 30, linetype = "dashed")
ggplot(data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun=function(x)Mxy(x, 70), geom="line", size = 2, aes(colour = "Gray matter")) +
stat_function(fun=function(x)Mxy(x, 55), geom="line", size = 2, aes(colour = "White matter")) +
stat_function(fun=function(x)Mxy(x, 70)-Mxy(x, 55), geom = "line", size = 2, aes(colour = "Contrast")) +
scale_colour_discrete("Tissue") +
xlab("Time (msec)") +
ylab("Tranverse magnetization (arbitrary units)") +
geom_vline(xintercept = 5, linetype = "dashed") +
geom_vline(xintercept = 30, linetype = "dashed") +
theme_bw(base_size = 14)
ggplot(data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun=function(x)Mxy(x, 70), geom="line", size = 2, aes(colour = "Gray matter")) +
stat_function(fun=function(x)Mxy(x, 55), geom="line", size = 2, aes(colour = "White matter")) +
stat_function(fun=function(x)Mxy(x, 70)-Mxy(x, 55), geom = "line", size = 2, aes(colour = "Contrast")) +
scale_colour_discrete("Tissue") +
xlab("Time (msec)") +
ylab("Transverse magnetization (arbitrary units)") +
geom_vline(xintercept = 5, linetype = "dashed") +
geom_vline(xintercept = 30, linetype = "dashed") +
theme_bw(base_size = 14)
ggplot(data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun=function(x)Mxy(x, 70), geom="line", size = 2, aes(colour = "Gray matter")) +
stat_function(fun=function(x)Mxy(x, 55), geom="line", size = 2, aes(colour = "White matter")) +
stat_function(fun=function(x)Mxy(x, 70)-Mxy(x, 55), geom = "line", size = 2, aes(colour = "Contrast")) +
scale_colour_discrete("Tissue") +
ggtitle("Natalia Velez - Question 7 Plot")
xlab("Time (msec)") +
ylab("Transverse magnetization (arbitrary units)") +
geom_vline(xintercept = 5, linetype = "dashed") +
geom_vline(xintercept = 30, linetype = "dashed") +
theme_bw(base_size = 14)
ggplot(data.frame(x = c(0, 100)), aes(x)) +
stat_function(fun=function(x)Mxy(x, 70), geom="line", size = 2, aes(colour = "Gray matter")) +
stat_function(fun=function(x)Mxy(x, 55), geom="line", size = 2, aes(colour = "White matter")) +
stat_function(fun=function(x)Mxy(x, 70)-Mxy(x, 55), geom = "line", size = 2, aes(colour = "Contrast")) +
scale_colour_discrete("Tissue") +
ggtitle("Natalia Velez - Question 7 Plot") +
xlab("Time (msec)") +
ylab("Transverse magnetization (arbitrary units)") +
geom_vline(xintercept = 5, linetype = "dashed") +
geom_vline(xintercept = 30, linetype = "dashed") +
theme_bw(base_size = 14)
?dt
?pf
pf(5.63, 2, 42)
pf(5.63, 2, 42, lower.tail = F)
dt(3.34, 33, lower.tail = F)
?dt
pt(3.34, 33, lower.tail = F)
library(tidyr)
library(tidyr)
library(plyr)
source('ibr.R')
source('viz.R')
?log
kl <- function (v1, v2) {
distro <- mapply(function (x, y) x*log(x/y))
return sum(distro)
}
?mapply
kl <- function (v1, v2) {
distro <- mapply(function (x, y) x*log(x/y), v1, v2)
return sum(distro)
}
v1 <- .25*rep(1, 4)
v2 <- c(.1, .2, .3, .4)
mapply(mapply(function (x, y) x*log(x/y), v1, v2))
mapply(function (x, y) x*log(x/y), v1, v2)
kl <- function (v1, v2) {
distro <- mapply(function (x, y) x*log(x/y), v1, v2)
return(sum(distro))
}
sum(mapply(function (x, y) x*log(x/y), v1, v2))
kl(v1, v2)
v1 <- .25*rep(1,4)
kl(v1sw)
kl(v1, v1sw)
v1 <- .25*rep(1,4)
v1sw <- c(.1, .2, .3, .4)
v2sw <- c(0, 2/11, 3/11, 4/11)
v3sw <- c(0, 1/8, 3/8, 1/2)
v4sw <- c(0, .14, .29, 57)
v5sw <- c(0, 1/6, 1/3, 1/2)
kl(v1, v1sw)
kl(v1, v2sw)
kl(v1, v3sw)
kl(v1, v4sw)
kl(v1, v5sw)
library(qdap)
install.packages("qdap")
library(qdap)
kullback_leibler(v1, v1sw)
kullback_leibler(v1, v2sw)
kullback_leibler(v1, v1sw)
kullback_leibler(v1, v2sw)
kullback_leibler(v1, v3sw)
kullback_leibler(v1, v4sw)
kullback_leibler(v1, v5sw)
kullback_leibler(v1sw, v1)
kullback_leibler(v2sw, v1)
kullback_leibler(v3sw, v1)
kullback_leibler(v4sw, v1)
kullback_leibler(v5sw, v1)
kullback_leibler(c(1/2, 1/3, 1/6, 0), v1)
?kullback_leibler
kullback_leibler(v5sw)
kullback_leibler(v1, v1sw)
kullback_leibler(v1, v2sw)
kullback_leibler(v1, v3sw)
kullback_leibler(v1, v4sw)
kullback_leibler(v1, v5sw)
kullback_leibler(v1sw, v1)
kullback_leibler(v2sw, v1)
kullback_leibler(v3sw, v1)
kullback_leibler(v4sw, v1)
kullback_leibler(v5sw, v1)
mapply(function (x,y) x-y, c(1, 1, 7/8, 4/7), c(1, 3/4, 1/2, 1/4))
cards <- 1:5
sw_solo <- c(1, 3/4, 1/2, 1/4, 0)
sw_solo <- c(1, 3/4, 1/2, 1/4, 0)
sw_sw <- c(1, 1, 7/8, 4/7, 0)
sw_st <- c(1, 3/7, 1/8, 0, 0)
?diff
sw_solo - sw_sw
diff_st <- abs(sw_sw - sw_solo)
d_predict <- data.frame(visible_card = cards,
solo = sw_solo,
switch = sw_sw,
stay = sw_st,
switch_gains = diff_sw,
stay_gains = diff_st)
cards <- 1:5
sw_solo <- c(1, 3/4, 1/2, 1/4, 0)
sw_sw <- c(1, 1, 7/8, 4/7, 0)
sw_st <- c(1, 3/7, 1/8, 0, 0)
diff_sw <- abs(sw_sw - sw_solo)
diff_st <- abs(sw_sw - sw_solo)
d_predict <- data.frame(visible_card = cards,
solo = sw_solo,
switch = sw_sw,
stay = sw_st,
switch_gains = diff_sw,
stay_gains = diff_st)
library(ggplot)
library(ggplot2)
library(dplyr)
library(tidyr)
d_predict
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(series, data, solo:stay_gains)
d_predict.tidy
ggplot(d_predict, aes(x = visible_card, y = data, color = series)) +
geom_line()
d_predict.tidy$series <- factor(d_predict.tidy$series)
ggplot(d_predict, aes(x = visible_card, y = data, color = series)) +
geom_line()
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(l, data, solo:stay_gains)
d_predict.tidy$l <- factor(d_predict.tidy$l)
ggplot(d_predict, aes(x = visible_card, y = data, color = l)) +
geom_line()
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(l, data, solo:stay_gains)
d_predict.tidy
d_predict.tidy$l <- factor(d_predict.tidy$l)
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line()
d_predict
diff_st <- abs(sw_st - sw_solo)
d_predict <- data.frame(visible_card = cards,
solo = sw_solo,
switch = sw_sw,
stay = sw_st,
switch_gains = diff_sw,
stay_gains = diff_st)
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(l, data, solo:stay_gains)
d_predict.tidy$l <- factor(d_predict.tidy$l)
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line()
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line() +
theme_bw()
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line() +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw()
?theme
d_predict.tidy$l <- factor(d_predict.tidy$l, levels = c("stay", "switch", "solo", "stay_gains", "switch_gains"))
d_predict.tidy$l
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(l, data, solo:stay_gains)
d_predict.tidy$l
d_predict.tidy$l <- factor(d_predict.tidy$l, levels = c("stay", "switch", "solo", "stay_gains", "switch_gains"))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line() +
xlab("Card visible to listener") +
ylab("P(Switch)") +
scale_linetype_manual(values=c('solid', 'solid', 'dashed', 'dashed', 'dashed')) +
theme_bw()
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line() +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'dashed', 'dashed', 'dashed'))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'dashed', 'dashed', 'dashed'))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'dashed', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'),
names = c('Stay', 'Switch'))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'),
names = c('a', 'b', 'c', 'd', 'e'))
?scale_color_manual
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'),
labels = c('a', 'b', 'c', 'd', 'e'))
?labs
?theme
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed'),
labels = c('a', 'b', 'c', 'd', 'e')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'))
?guides
d_predict <- data.frame(visible_card = cards,
solo = sw_solo,
switch = sw_sw,
stay = sw_st,
switch_gains = diff_sw,
stay_gains = diff_st)
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(model, data, solo:stay_gains)
d_predict.tidy$model <- factor(d_predict.tidy$model, levels = c("stay", "switch", "solo", "stay_gains", "switch_gains"))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = l)) +
geom_line(aes(linetype = l, color = l)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff')) +
guides()
d_predict <- data.frame(visible_card = cards,
solo = sw_solo,
switch = sw_sw,
stay = sw_st,
switch_gains = diff_sw,
stay_gains = diff_st)
d_predict.tidy <- d_predict %>%
group_by(visible_card) %>%
gather(model, data, solo:stay_gains)
d_predict.tidy$model <- factor(d_predict.tidy$model, levels = c("stay", "switch", "solo", "stay_gains", "switch_gains"))
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = model)) +
geom_line(aes(linetype = model, color = model)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff')) +
guides()
ggplot(d_predict.tidy, aes(x = visible_card, y = data, color = model)) +
geom_line(aes(linetype = model, color = model)) +
xlab("Card visible to listener") +
ylab("P(Switch)") +
theme_bw() +
scale_linetype_manual(values=c('solid', 'solid', 'solid', 'dashed', 'dashed')) +
scale_color_manual(values = c('#ff3e3e', '#3eacff', '#000000', '#ff3e3e', '#3eacff'))
d_predict
?matrix
?matrix
p_cs_switch = matrix(c(NA, .1, .2, .3, .4,
0, NA, 2/11, 3/11, 4/11,
0, 1/8, NA, 3/8, 1/2,
0, 0.14, 0.29, NA, 0.57,
0, 1/6, 1/3, 1/2, NA), ncol = 5)
p_cs_switch
p_cs_switch = matrix(c(NA, .1, .2, .3, .4,
0, NA, 2/11, 3/11, 4/11,
0, 1/8, NA, 3/8, 1/2,
0, 0.14, 0.29, NA, 0.57,
0, 1/6, 1/3, 1/2, NA), ncol = 5m
dimnames = c('S', 'L'))
p_cs_switch = matrix(c(NA, .1, .2, .3, .4,
0, NA, 2/11, 3/11, 4/11,
0, 1/8, NA, 3/8, 1/2,
0, 0.14, 0.29, NA, 0.57,
0, 1/6, 1/3, 1/2, NA), ncol = 5m,
dimnames = c('S', 'L'))
p_cs_switch = matrix(c(NA, .1, .2, .3, .4,
0, NA, 2/11, 3/11, 4/11,
0, 1/8, NA, 3/8, 1/2,
0, 0.14, 0.29, NA, 0.57,
0, 1/6, 1/3, 1/2, NA), ncol = 5,
dimnames = c('S', 'L'))
p_cs_switch = matrix(c(NA, .1, .2, .3, .4,
0, NA, 2/11, 3/11, 4/11,
0, 1/8, NA, 3/8, 1/2,
0, 0.14, 0.29, NA, 0.57,
0, 1/6, 1/3, 1/2, NA), ncol = 5,
dimnames = list('S', 'L'))
p_cs_switch = matrix(c(NA, .1, .2, .3, .4,
0, NA, 2/11, 3/11, 4/11,
0, 1/8, NA, 3/8, 1/2,
0, 0.14, 0.29, NA, 0.57,
0, 1/6, 1/3, 1/2, NA), ncol = 5,
dimnames = list(1:5, 1:5))
p_cs_switch
c(NA, 1:4)
c(NA, 1:4) * 1:5
p_cs_stay = matrix(c(NA, 1/2, 1/3, 1/6, 0,
0.57, NA, .29, .14, 0,
.5, 3/8, NA, 1/8, 0,
4/11, 3/22, 3/11, NA, 0,
.4, .3, .2, .1, NA), ncol = 5,
dimnames = list(1:5, 1:5))
mean(c(2:5))
mean(c(1, 3:4))
mean(c(1, 3:5))
mean(c(1:2, 4:5))
mean(c(1:3, 5))
knitr::opts_chunk$set(echo = TRUE)
# Load libraries
library(R.matlab)
library(ggplot2)
library(stringr)
library(dplyr)
library(tidyr)
library(RColorBrewer)
library(ggplot2)
library(ggthemes)
library(dplyr)
library(tidyr)
library(rjson)
library(lme4)
library(pander)
library(effsize)
?pz
?pt
pnorm(5, lower.tail = F)
pnorm(4, lower.tail = F)
qnorm(0.001, lower.tail = F)
qnorm(0.001, lower.tail = T)
qnorm(0.001, lower.tail = F)
qnorm(0.0001, lower.tail = F)
pnorm(3.72, lower.tail = F)
qnorm(0.00001, lower.tail = F)
14*.64
?chisq.test
chisq.test(c(9,5))
?binom.test
binom.test(9, 14)
?chisq.test
13*.38
chisq.test(c(9,5), c(5,8))
chisq.test(rbind(c(9,5), c(5,8)))
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
setwd('~/Downloads/rwebppl-master/')
ls
devtools::install_github("mhtess/rwebppl")
install.packages('devtools')
devtools::install_github("mhtess/rwebppl")
version
setwd("~/Dropbox/CBMM16/Project/experiments/multipilot_v1/results")
library(rjson)
library(dplyr)
library(tidyr)
library(ggplot2)
scenario_info = fromJSON(file = 'scenarios.json')
data_files = list.files('pilot-results', pattern = '*.json')
fishing_data = NULL
# Helper function to find items in a list
lookup <- function(list, fun) {
is_match = sapply(list, fun)
return(which(is_match))
}
# Uses match_function to pull up information for each trial
match_scenario <- function(trees, strengths) {
match_index = lookup(scenario_info,
function (x) x$trees == trees && all(x$strengths == strengths))
return(scenario_info[[match_index]])
}
for (f in 1:length(data_files)) {
session_data = fromJSON(file = file.path('pilot-results', data_files[f]))
for (trial in 1:length(session_data)) {
trial_data = session_data[[trial]]
num_trees = trial_data$trees
strengths = trial_data$strengths
n_solutions = match_scenario(num_trees, strengths)$n_solutions
fishing_data = rbind(fishing_data,
data.frame(
team = f,
trial_no = trial_data$num,
num_trees = num_trees,
p1_strength = strengths[1],
p2_strength = strengths[2],
p3_strength = strengths[3],
n_solutions = n_solutions,
p1_choice = trial_data$player_choices[1],
p2_choice = trial_data$player_choices[2],
p3_choice = trial_data$player_choices[3],
payoff = trial_data$payoff,
max_payoff = trial_data$max_payoff,
is_max = trial_data$is_max
))
}
}
best_group = fishing_data %>%
group_by(team) %>%
summarise(n_trials = length(trial_no)) %>%
arrange(n_trials)
se <- function(x){return(sd(x)/sqrt(length(x)))}
# Displays all of the raw data
time_to_criterion = fishing_data %>%
group_by(team, n_solutions, trial_no) %>%
summarise(time_to_criterion = length(payoff)) %>%
mutate(block = rank(trial_no)) %>%
ungroup() %>%
mutate(category = factor(n_solutions, label = c("One solution", "Two solutions", "Three solutions")),
team = factor(team))
ggplot(time_to_criterion, aes(x = block, y = time_to_criterion, group = team, color = team)) +
geom_point() +
geom_line() +
facet_grid(. ~ category)
# Summarises by first and last blocks
time_by_team = time_to_criterion %>%
mutate(chunk = ifelse(block < 5, 'First half', 'Second half')) %>%
group_by(chunk, category, team) %>%
summarise(time_by_chunk = mean(time_to_criterion))
ggplot(time_by_team, aes(x = chunk, y = time_by_chunk, group = team, color = team)) +
geom_point() +
geom_line() +
facet_grid(. ~ category)
# Summarises across teams
avg_time = time_by_team %>%
group_by(chunk, category) %>%
summarise(avg_time = mean(time_by_chunk),
se_time = se(time_by_chunk))
ggplot(avg_time, aes(x = chunk, y = avg_time, group = category, color = category)) +
geom_point() +
geom_line() +
geom_errorbar(width = 0.1, aes(ymin = avg_time - se_time, ymax = avg_time + se_time)) +
xlab('Time') +
ylab('Number of attempts') +
theme_bw(base_size = 18)
# Summarise time by category, block
time_by_block = time_to_criterion %>%
group_by(block, category) %>%
summarise(avg_time = mean(time_to_criterion),
se_time = se(time_to_criterion))
ggplot(time_by_block, aes(x = block, y = avg_time, group = category, color = category)) +
geom_point() +
geom_line() +
#geom_errorbar(aes(ymin = avg_time - se_time, ymax = avg_time + se_time), width = 0.1) +
xlab("Block") +
ylab("Number of attempts") +
theme_bw() +
scale_color_brewer("Trial type", palette = 'Set2')
